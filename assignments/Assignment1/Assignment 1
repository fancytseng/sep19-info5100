Design a Traffic Controller System for a Junction
Design a Car Rental System
Design a Course Registration Platform
Design a vending Machine (will accept coins of different denominations and vends out candies, soda etc)
Design a Parking lot
---------------------------------------------------------------------------------------------------------
// 2. Design a Car Rental System

User can:
1.Login
2.Search cars based on parameters(brand,budget,type)
3.Review order
4.Rent cars
5.Cancel renting


Class:User
Data:name, phoneNumber, ssn, driverLicense,creditCardDetails
Behaviour:
loginCarRentalApp(){
App.login(name);
}
searchCars(searchParams){
List<Cars> cars = RentalService.search(searchParams);
//display cars to user
}
rentACar(){
rentingDetails = rentalService.rentACar(carId,rentalDate,returnDate,brandOfCar)
}
review(){
System.out.print(this.order);
}
contactCarRentalOwner(){
HelpService.call(orderId);
}
cancel(orderId){
carRentalApp.cancelOrder(orderId);
}

Class:CreditCardDetails
Data: name,cardNumber,cardType,expiredDate
Behaviour:
isCardExpired(){
Date today = new Date();
if(today.compareTo(expiredDay)==1){
return true;
else{
return false;
}
}
}

Class:CarRentalOwner
Data:name,address,list of cars, ownerId

Class:Car
Data:name,brand,totalCars,carPrice,carId,reviews,rating
Behaviour:
checkAvailability(date,numberOfCars,brand){
//check availability of number of specific brand of car on a specific date
}

Class: carRentalService
Behaviour:
search(searchParams){
//call to fetch all cars and store in List<Cars> cars
List<Cars> availableCars
List<Cars> cars

for (i=0; i < cars.size(); i++){
//check if car is available for specific date
Boolean isAvailable = true;
while (searchParams.rentalDate.compareTo(searchParams.returnDate)){
if (!cars.get(i).checkAvailability(searchParams.rentalDate,searchParams.numberOfCars)){
is available = false;
break;
}
}
}
if(isAvailable && cars.get(i).contains(searchParams) && cars.get(i).price<=searchParams.maxPrice
&& cars.get(i).price>=searchParams.minPrice && cars.get(i).name.indexOf(searchParams.name)){
availableCars.add(cars.get(i));
return availableCars;
}

Behaviours:
rentACar(carId,rentalDate,returnDate,brandOfCars){
//fetch car object from carId
Car car;
//calculate number of days
int numberOfDays;

//fetch creditCardDetails if saved
if(!creditCardDetails.notExpired()){
//calculate rental fee
int price = carRentalPrice * numberOfDays;
paymentService.makePayment(userId,price);
return rentalDetails;
}
else throw new Exception ("your card is expired!");
}

Behaviour:
cancelrental(carRetnalId){
paymentService.initialRefund(user,price)
}
---------------------------------------------------------------------------------------------------------
// 3. Design a Course Registration Platform

User can:
1.Login course registration platform
2.Search course list
3.Select course
4.Add/Drop course
5.Pay

Class: Student
Data: name, studentId, major
Behaviour:
loginRegistrationPlatform(){
platform.login(name);
}

searchCourses(searchParams){
List<Course> course = registrationPlatform.search(search.params);
//display courses to student
}

registerCourse(){
if(course.isAvailable())
course.add(courseId);
else
error;
}

cancelCourse(){
student.cancelCourse(courseId)
}

Class:creditCardDetails
Data: name, cardNumber,cardType,expiredDate
Behaviour:
isCardExpired(){
Date today = new Date();
if (today.compareTo(expiredDate) == 1)
return true;
return false;
}

Class: Registration Platform
Data: courseId, courseAvailability, courseCapacity
Behaviour:
checkAvailability(courseId, courseAvailability, courseCapacity){
// check availability of course
}

List<Course> availableCourses;
List<Course> course;
if(courseurse.isAvailable()){
Boolean isAvailable = true;
else false;
}

if(creditCardDetails.isCardExpired()){
int price = course.price * numberOfCourse 
;
paymentService.makePayment(studentName, price);
}
else throw new Exception ("Card is Expired");
}

Behaviour:
dropCourse(courseId){
paymentService.initiateRefund(studentName, price)
}

---------------------------------------------------------------------------------------------------------
// 4. Design a vending Machine (will accept coins of different denominations and vends out candies, soda etc)

Customer can
1.put the coins into a vending machine
2.Select the drinks that he/she wants
3.Get the change and drinks
4 Not get the drinks and get the refund
5.Cancel


Class: Customer
Data: creditCardDetails, theIdOfTheDrinksThatHeIsGetting
Behaviour:
selectOrder(drinksNumber) {
Drinks drinks = customer.selectOrder(drinksNumber)
}
Behaviour:
cancelOrder(){
customer.pressCancelButton()
}

Class: CreditCardDetails
Data: name,bankName, cardNumber,cardType,expiredDate
Behaiour:
isCardExpired(){
Date today = new Date();
if(today.compareTo(expiredDate)==1)
return true;
return false;
}

Class:Coins
Data:Quarter, Dime, Penny
Behaviour:
isSufficient(){
This.coin=coin(){
if(valueOfCoin==priceOfDrinks){
return true;
}
else {
return false;
}
}

Class: VendingMachine
Data: quantityOfDrinks, priceOfDrinks
Behavior:
checkAvailability(quantityOfDrinks){
//check availability of quantity of drinks on specific row and column
}

for (i=0; i<quantityOfDrinks(); i++){
//check if the drinks quantity that customer want is enough
Boolean isEnough = true;
while(quantityCustomerSelect.compareTo(quantityOfDrinks)){
if(!vendingMachine.get (i).checkEnoughOrNot(quantityOfDrinks)){
isEnough = true;
break;
}
else{
throw new SoldOutException("Sold Out, Please buy another item");
}
if(isEnoug&&creditCard.notExpired.sufficientAmount
&&customer.SelectPrice <= creditCardAvailableAmount
&&vendingMachine.working){
vendingMachine.pushTheDrinksOut(drinks);
customer.getsTheDrinks(drinks);
}
return 0;
}

----------------------------------------------------------------------
// 5. Design a Parking lot


User can:
1.insert ticket
2.pay the ticket
3.check capacity
4.find/cancel parking

Class: User
Data: name, plate number, userLocation, carSize, parking ticket
Behaviour:
user.insertParkingTicket(){
machine.scanTicket(ticketId){
}
}
Behaviour:
findParking(){
parkingDetails = user.findParking(parkingId, startTime, endTime)
}

Behaviour:
cancel(){
user.cancelParking();
}

Class: creditCardDetails
Data: name, cardNumber, cardType,expiredDate
Behaviour:
isCardExpired(){
if today = new Date;
if (today.compareTo(expiredDate)==1);
return true;
else {
return false;
}
}

Class: Parking lot
Data: parkingLotLocation, parkingSpace, parkingPrice, date, time
Behaviour:
checkAvailability (parkingSpace, date, time){
//check availability of number of parking space on specific date and time
}

Class: parking system
Data: parking ticket, parking hours, parking time)
Behaviour:
findParking(parkingId, beginTime, endTime){
parking Parking;
int hoursOfParking;

if(creditCardDetails.isCardExpired(){
int price = parking.price * hoursOfParking;
paymentService.makePayment(parkingId, price);
return paymentId;
}
else throw new Exception("Card is Expired");
}
